#! /bin/sh
# shellcheck shell=bash
#
#   Copyright (c) 2018 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' -o "${MULLE_TEMPLATE_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

#
# restart with clean environment (still in bourne shell)
#
case "$1" in
   --clean-env)
      shift

      if [ "${TRACE}" = 'YES' -o "${MULLE_TEMPLATE_TRACE}" = 'YES' ]
      then
         exec env -i \
               TRACE="YES" \
               PATH="$PATH" \
                "$0" "$@"
      fi

      exec env -i \
               PATH="$PATH" \
               "$0" "$@"
   ;;
esac


MULLE_EXECUTABLE_VERSION=1.1.0
MULLE_EXECUTABLE_BASHFUNCTIONS="5.1"

##
## MEMO: need the old way here because of --clean-env booter
##

##########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################
# #
# # PRELUDE - Standard startup code for loading mulle-bashfunctions
# #
###

#
# Figure out MULLE_BASHFUNCTIONS_LIBEXEC_DIR on this machine if needed.
#
if ! [ ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR+x} ]
then
   if ! executable="`command -v "mulle-bashfunctions" `"
   then
      echo "mulle-bashfunctions not found in PATH ($PATH)" >&2
      exit 1
   fi

   if ! MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`"${executable}" libexec-dir `"
   then
      echo "mulle-bashfunctions ($executable) failed unexpectedly ?" >&2
      exit 1
   fi
   unset executable

   export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
fi

#
# The booter reruns the executable either with bash or zsh, whatever the
# system provides. On the second run --no-auto-shell will be set first.
#
if [ "${1:-}" != --no-auto-shell ]
then
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
else
   shift    # get rid of --no-auto-shell
fi


#
# Include mulle-bashfunctions.sh         : default functions
#         mulle-bashfunctions-none.sh    : almost no functions
#         mulle-bashfunctions-minimal.sh : few functions for basic scripts
#         mulle-bashfunctions-all.sh     : everything, even obscure functions
#
# Do this first to get aliases
#
MULLE_EXECUTABLE="${BASH_SOURCE[0]:-${(%):-%x}}"
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1

###
# # Now we are in bash or zsh with mulle-bashfunctions loaded
# #
###########################################################################
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
###########################################################################


#
# Determine location of own libexec directory. Which is `src` in development
# and ../libexec when deployed. MULLE_EXECUTABLE needs to be defined for this.
#

if ! [ ${MULLE_TEMPLATE_LIBEXEC_DIR+x} ]
then
   r_get_libexec_dir "${MULLE_EXECUTABLE}" "mulle-template" "mulle-template-generate.sh"
   MULLE_TEMPLATE_LIBEXEC_DIR="${RVAL}"
fi

set +u


template::print_flags()
{
   local delimiter

   delimiter="           : "

   echo "   -f   ${delimiter}force operation"
   echo "   -DKEY=VALUE     : define environment variable"
   echo "   --clean-env     : run with clean environment (must be first flag!)"
   echo "   --source <file> : read file to define environment"

   options_technical_flags_usage "${delimiter}"
}


#
# This is the template::main user interface to mulle-sde
# sorta like git
#
template::print_commands()
{
   local show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   generate        : create a source file from a template
   list            : list keys of a template file"

   HIDDEN_COMMANDS="\
   libexec-dir     : print path to mulle-sde libexec
   uname           : mulle-templates simplified uname(1)
   version         : mulle-templates version"

   printf "%s\n" "${SHOWN_COMMANDS}" | LC_ALL=C sort

   if [ "${show_all}" != 'NO' ]
   then
      printf "%s\n" "${HIDDEN_COMMANDS}" | LC_ALL=C sort
   fi
}


template::print_usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options]

   Generate files from templates, by substituting keys enveloped in <| |> with
   values found in the environment with the same key. You can generate a single
   file from a single template or multiple files with a directory containing
   templates. Unless forced with the '-f' flag, ${MULLE_USAGE_NAME} will _not_
   overwrite existing files.

   If a key is missing you can supply a default replacement text with
   <|KEY:-default|>. A small example:

   printf "<|DATE|>\\nHello <|NAME:-Unknown|>\\nYours\\n\\t<|AUTHOR|>\\n" > a
   ${MULLE_USAGE_NAME} --clean-env -DAUTHOR="moi" generate a -

   See \`${MULLE_USAGE_NAME} generate help\` for more information.

Flags:
EOF
   template::print_flags "${verbose}" | LC_ALL=C sort


   cat <<EOF

Commands:
EOF

   template::print_commands "${verbose}" | LC_ALL=C sort

   if [ "${verbose}" = 'NO' ]
   then
      cat <<EOF
      (use mulle-sde -v help to show more commands)
EOF
   fi

   cat <<EOF

   Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.
EOF
}


template::usage()
{
   [ "$#" -ne 0 ] && log_error "$*"

   template::print_usage "${MULLE_FLAG_LOG_VERBOSE}" >&2

   exit 1
}


template::list_usage()
{
   [ "$#" -ne 0 ] && log_error "$*"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} list <file> ...

   List variables contained in a template file.
EOF
   exit 1
}


template::set_custom_define()
{
   log_entry "template::set_custom_define" "$@"

   local keyvalue="$1"

   local key
   local value

   key="${keyvalue%%=*}"

   if [ -z "${key}" ]
   then
      key="${keyvalue}"
   else
      value="${keyvalue#*=}"
   fi

   if [ "${key}" != "`printf "%q" "${key}"`" ]
   then
      fail "Invalid Environment key \"${key}\""
   fi

   eval "export ${key}=${value}"

   log_fluff "Set environment variable \"${key}\" to '${value}'"
}


template::set_custom_environment()
{
   log_entry "template::set_custom_environment" "$@"

   local defines="$1"

   local i

   .foreachline i in ${defines}
   .do
      template::set_custom_define "${i#-D}"
   .done
}


template::main()
{
   local defines
   local quoted
   local key
   local value

   #
   # simple option handling
   #
   while [ $# -ne 0 ]
   do
      if options_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help|help)
            template::usage
         ;;

         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE='YES'
         ;;

         --clean-env)
            fail "$1 must be the very first flag in the commandline"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         --list-flags)
            (
               echo "\
--force
-D"
               options_technical_flags --list-technical-flags
            ) | sort
            exit 0
         ;;

         -D*)
#            r_add_line "${MULLE_DEFINE_FLAGS}" "$1"
#            MULLE_DEFINE_FLAGS="${RVAL}"
            # we can grab multiline stuff this way, but can't replace
            # it with sed :(
            key="${1%%=*}"
            value="${1#*=}"
            printf -v quoted "%s=%q" "${key}" "${value}"
            r_add_line "${defines}" "${quoted}"
            defines="${RVAL}"
         ;;

         --source)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            # needed for zsh
            r_absolutepath "$1"
            . "${RVAL}" || fail "Reading ${RVAL} produced $? as return value, indicating failure"
         ;;

         -*)
            template::usage "Unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x

   local cmd

   cmd="$1"
   [ $# -ne 0 ] && shift

   template::set_custom_environment "${defines}"

   case "${cmd}" in
      bash-completion)
         log_warning "bash completion no longer supported"
      ;;

      commands)
         echo "
clean
environment
libexec-dir
library-path
list
generate
uname
version"
         exit 0
      ;;

      csed|contents-sed)
         # shellcheck source=src/mulle-template-generate.sh
         . "${MULLE_TEMPLATE_LIBEXEC_DIR}/mulle-template-generate.sh" \
         || _internal_fail "load fail"
         template::generate::main "csed" "$@"
      ;;

      csed-script)
         # shellcheck source=src/mulle-template-generate.sh
         . "${MULLE_TEMPLATE_LIBEXEC_DIR}/mulle-template-generate.sh" \
         || _internal_fail "load fail"

         template::generate::main "csed-script" "$@"
      ;;

      fsed|filename-sed)
         # shellcheck source=src/mulle-template-generate.sh
         . "${MULLE_TEMPLATE_LIBEXEC_DIR}/mulle-template-generate.sh" \
         || _internal_fail "load fail"
         template::generate::main "fsed" "$@"
      ;;

      fsed-script)
         # shellcheck source=src/mulle-template-generate.sh
         . "${MULLE_TEMPLATE_LIBEXEC_DIR}/mulle-template-generate.sh" \
         || _internal_fail "load fail"

         template::generate::main "fsed-script" "$@"
      ;;

      generate)
         # shellcheck source=src/mulle-template-generate.sh
         . "${MULLE_TEMPLATE_LIBEXEC_DIR}/mulle-template-generate.sh" \
         || _internal_fail "load fail"

         template::generate::main "write" "$@"
      ;;

      environment)
         env | LC_ALL=C sort
      ;;

      hostname)
         rexekutor printf "%s\n" "${MULLE_HOSTNAME}"
      ;;


      libexec-dir|library-path)
         exekutor printf "%s\n" "${MULLE_TEMPLATE_LIBEXEC_DIR}"
      ;;

      list)
         [ $# -eq 0 ] && template::list_usage "Missing file argument"

         rexekutor sed -n -e 's/[^<]*<|\([A-Za-z_][A-Za-z0-9_]*\)|>/\1\n/gp' $* \
                  | sed -e '/^$/d' \
                  | sort -u
      ;;

      uname)
         rexekutor printf "%s\n" "${MULLE_UNAME}"
      ;;

      version)
         rexekutor printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      ""|help)
         template::usage
      ;;

      *)
         # shellcheck source=src/mulle-template-generate.sh
         . "${MULLE_TEMPLATE_LIBEXEC_DIR}/mulle-template-generate.sh" \
         || _internal_fail "load fail"

         template::generate::main write "${cmd}" "$@"
      ;;
   esac

   return $rval
}


call_with_flags "template::main" "${MULLE_TEMPLATE_FLAGS}" "$@"
