#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh"          || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


# the tests here are wrong, mulle-craft shouldn't b
run_mulle_template()
{
   if [ "$1" = "--clean-env" ]
   then
      shift

      log_fluff "####################################"
      log_fluff ${MULLE_TEMPLATE} --clean-env ${MULLE_TEMPLATE_FLAGS} "$@"
      log_fluff "####################################"

      exekutor "${MULLE_TEMPLATE}" --clean-env ${MULLE_TEMPLATE_FLAGS} "$@"
   else
      log_fluff "####################################"
      log_fluff ${MULLE_TEMPLATE} ${MULLE_TEMPLATE_FLAGS} "$@"
      log_fluff "####################################"

      exekutor "${MULLE_TEMPLATE}" ${MULLE_TEMPLATE_FLAGS} "$@"
   fi
}


expect()
{
   local expected="$1"
   local filename="$2"

   local result

   if ! result="`cat "${filename}" 2> /dev/null`"
   then
      fail "${filename} does not exist"
   fi

   log_debug "${filename}: ${result}"
   if [ "${expected}" != "${result}" ]
   then
      fail "${filename}: \"${result}\" != \"${expected}\""
   fi
}


main()
{
   MULLE_TEMPLATE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   MULLE_TEMPLATE_EXTENSION_PATH="${PWD}"
   export MULLE_TEMPLATE_EXTENSION_PATH

   local directory

   r_make_tmp_directory
   directory="${RVAL:-/tmp/build}"

   if run_mulle_template --clean-env -DKEY="-" "template-notthere" "${directory}/output"
   then
      fail "Missing template should be an error"
   fi
   log_warning "Failed as expected"

   if [ -e "${directory}/output" ]
   then
      fail "File should not have been created on error"
   fi

   log_verbose "----- #1 PASSED -----"

   run_mulle_template --clean-env -DKEY="-" "template" "${directory}/output"
   expect "a-z" "${directory}/output"

   log_verbose "----- #2 PASSED -----"

   # should not clobber if already present
   run_mulle_template --clean-env -DKEY="-" "template" "${directory}/output"
   expect "a-z" "${directory}/output"

   log_verbose "----- #3 PASSED -----"

   # but clobbers with force
   run_mulle_template --clean-env -f -DKEY="--" "template" "${directory}/output"
   expect "a--z" "${directory}/output"

   log_verbose "----- #4 PASSED -----"

   # Test double quotes
   run_mulle_template --clean-env -f -DKEY='"quoted"' "template" "${directory}/output"
   expect 'a"quoted"z' "${directory}/output"

   log_verbose "----- #5 PASSED -----"

   # Test single quotes
   run_mulle_template --clean-env -f -DKEY="'single'" "template" "${directory}/output"
   expect "a'single'z" "${directory}/output"

   log_verbose "----- #6 PASSED -----"

   # Test backslashes
   run_mulle_template --clean-env -f -DKEY='\back\slash' "template" "${directory}/output"
   expect 'a\back\slashz' "${directory}/output"

   log_verbose "----- #7 PASSED -----"

   # Test mixed special characters
   run_mulle_template --clean-env -f -DKEY='"mixed'\''\\chars"' "template" "${directory}/output"
   expect 'a"mixed'\''\\chars"z' "${directory}/output"

   log_verbose "----- #8 PASSED -----"

   # Test with spaces
   run_mulle_template --clean-env -f -DKEY="with spaces" "template" "${directory}/output"
   expect "awith spacesz" "${directory}/output"

   log_verbose "----- #9 PASSED -----"

   # Test with actual linefeeds
   run_mulle_template --clean-env -f -DKEY=$'line1\nline2' "template" "${directory}/output"
   expect $'aline1\nline2z' "${directory}/output"

   log_verbose "----- #10 PASSED -----"

   # Test with escaped linefeeds
   run_mulle_template --clean-env -f -DKEY='line1\\nline2' "template" "${directory}/output"
   expect 'aline1\\nline2z' "${directory}/output"

   log_verbose "----- #11 PASSED -----"

   # Test with tabs and carriage returns
   run_mulle_template --clean-env -f -DKEY=$'tab\there\rcarriage' "template" "${directory}/output"
   expect $'atab\there\rcarriagez' "${directory}/output"

   log_verbose "----- #12 PASSED -----"

   log_info "----- ALL PASSED -----"
   cd ..
   rmdir_safer "${directory}"
}

init()
{
   MULLE_TEMPLATE="${MULLE_TEMPLATE:-${PWD}/../../mulle-template}"
}

init "$@"
main "$@"
