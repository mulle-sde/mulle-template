#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


# the tests here are wrong, mulle-craft shouldn't b
run_mulle_template()
{
   if [ "$1" = "--clean-env" ]
   then
      shift

      log_fluff "####################################"
      log_fluff ${MULLE_TEMPLATE} --clean-env ${MULLE_TEMPLATE_FLAGS} "$@"
      log_fluff "####################################"

      exekutor "${MULLE_TEMPLATE}" --clean-env ${MULLE_TEMPLATE_FLAGS} "$@"
   else
      log_fluff "####################################"
      log_fluff ${MULLE_TEMPLATE} ${MULLE_TEMPLATE_FLAGS} "$@"
      log_fluff "####################################"

      exekutor "${MULLE_TEMPLATE}" ${MULLE_TEMPLATE_FLAGS} "$@"
   fi
}


expect()
{
   local expected="$1"
   local filename="$2"

   local result

   if ! result="`cat "${filename}" 2> /dev/null`"
   then
      fail "${filename} does not exist"
   fi

   log_debug "${filename}: ${result}"
   if [ "${expected}" != "${result}" ]
   then
      fail "${filename}: \"${result}\" != \"${expected}\""
   fi
}


main()
{
   MULLE_TEMPLATE_FLAGS="$@"

   _options_mini_main "$@" && set -x

   MULLE_TEMPLATE_EXTENSION_PATH="${PWD}"
   export MULLE_TEMPLATE_EXTENSION_PATH

   local directory

   r_make_tmp_directory
   directory="${RVAL:-/tmp/build}"

   if run_mulle_template --clean-env -DKEY="-" "dir-notthere" "${directory}/output"
   then
      fail "Missing template should be an error"
   fi
   log_warning "Failed as expected"

   if [ -e "${directory}/output" ]
   then
      fail "File should not have been created on error"
   fi

   log_verbose "----- #1 PASSED -----"

   #
   # Copy to non existing directory
   #
   run_mulle_template --clean-env -DKEY="-" "dir" "${directory}/output"
   expect "a-z" "${directory}/output/dir/template"

   log_verbose "----- #2 PASSED -----"

   #
   # Copy to an existing directory
   #
   # Should not clobber files, if already present
   run_mulle_template --clean-env -DKEY="-" "dir" "${directory}/output"
   expect "a-z" "${directory}/output/dir/template"

   log_verbose "----- #3 PASSED -----"

   #
   # Copy to an existing directory
   #
   # but clobbers with force
   run_mulle_template --clean-env -f -DKEY="--" "dir" "${directory}/output"
   expect "a--z" "${directory}/output/dir/template"

   log_verbose "----- #4 PASSED -----"


   #
   # Copy to pwd
   #
   local templatedir

   templatedir="${PWD}"
   (
      rexekutor cd "${directory}" &&
      run_mulle_template --clean-env -DKEY="-" "${templatedir}/dir"
   ) ||  fail "Did fail unexpectedly"

   expect "a-z" "${directory}/dir/template"

   log_verbose "----- #5 PASSED -----"


   log_info "----- ALL PASSED -----"

   rmdir_safer "${directory}"
}



init()
{
   MULLE_TEMPLATE="${MULLE_TEMPLATE:-${PWD}/../../mulle-template}"
}

init "$@"
main "$@"
